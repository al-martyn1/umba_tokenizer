---
Title: Brief Description for Project Sources
Generator: Umba Brief Scanner
---



# inc/umba

- `c_char_class.h` - Константы классов символов. При помощи классов символов можно просто писать простейшие лексера. Уложены в 16 бит для компактности для встраиваемых применений.
- `c_char_class_table.h.inc` - Таблица классов символов для симолов базовой таблицы ASCII, версия "C"
- `c_tokenizer.h` - Утилиты для работы с trie символов. Предполагалось делать с поддержкой языка "C"
- `c_tokenizer_constants.h` - "Стандартные" предопределенные константы для токенов. Используются макросы, так как предполагается расширение набора констант, и предполагалось использование из языка "C"
- `char_class.h` - Константы классов символов (C++). При помощи классов символов можно просто писать простейшие лексера
- `char_class_table.h.inc` - Таблица классов символов для симолов базовой таблицы ASCII, версия "C++"
- `tokenizer.h` - Основной файл библиотеки токенизатора. Подключает все необходимые заголовки

# inc/umba/tokenizer

- `defs.h` - Общие макросы, а также определение/задание опций сборки. Внутренний хидер.
- `enums.h` - Autogenerated enumerations (Umba Enum Gen)

# inc/umba/tokenizer/filters

- `cc_preprocessor_filter.h` - Фильтр, вставляющий маркеры (без полезной нагрузки) препроцессора C/C++. Переключает режим угловых скобок, чтобы их содержимое парсилось как строка. Переключает режим символа '#'.
- `dbl_square_brackets_composing_filters.h` - Фильтры DblSquareBracketOpenComposingFilter и DblSquareBracketCloseComposingFilter - преобразуют двойные токены [[ и ]] в одинарные
- `filter_base.h` - Базовый класс для сложных фильтров с буферизацией токенов
- `identifier_to_keyword_conversion_filter.h` - Фильтр для преобразования идентификаторов в различные токены по заданной таблице
- `kebab_case_composing_filter.h` - Филтр для преобразования последовательностей идентификаторов и неразрывных с ними минусов в единственный kebab-style идентификатор
- `repeated_token_composing_filter.h` - Фильтр для преобразования простой последовательности из N токенов в единственный токен
- `simple_pass_trough_filter.h` - Фильтр, просто пропускающий токены дальше. Пример простого фильтра
- `simple_replace_filter.h` - Фильтр простой замены одного токена на другой. Нагрузка не меняется
- `simple_sequence_composing_filter.h` - Фильтр замены последовательности токенов на один токен
- `simple_suffix_gluing_filter.h` - Фильтр, "приклеивающий" идентификатор-суффикс к строковому или числовому литералу
- `token_collecting_filter.h` - Простой фильтр, который буферизирует одинаковые токены. Он хранит только итератор первого токена в последовательности
- `token_range_conversion_filter.h` - Конвертирует токены из диапазона в один токен, и устанавливает нагрузку в размер офсета от стартового, добавяя дополнительное смещение. Предназначено для операторов переменной длины
- `unclassified_chars_collecting_filter.h` - Фильтр, склеивающий отдельные неклассифицированные символы в последовательность

# inc/umba/tokenizer/lexers

- `cpp.h` - Лексер (сканер) для языка C/C++
- `mermaid_packet_diagram.h` - Лексер (сканер) диаграмм mermaid packet diagram
- `mermaid_packet_diagram_tokens.h` - Определение токенов, специфичных для mermaid packet diagram
- `plantuml.h` - Лексер (сканер) диаграмм plantuml
- `ufsm.h` - Лексер (сканер) диаграмм UmbaFSM
- `ufsm_tokens.h` - Определение токенов, специфичных для Umba State Machine
- `usketch_tokenizer.h` - Токенизатор/лексер usketch
- `usketch_tokens.h` - Определение токенов, специфичных для usketch

# inc/umba/tokenizer/parsers/mermaid

- `packet_diagram_cpp.h` - Хелперы для вывода в сишечку и плюсики, а также в текстовые диаграммы
- `packet_diagram_enums.h` - Autogenerated enumerations (Umba Enum Gen)
- `packet_diagram_parser.h` - Парсер mermaid packet diagram, расширенная версия, с использованием типов и массивов
- `packet_diagram_parser_types.h` - Типы для парсера mermaid packet diagram, расширенная версия, с использованием типов и массивов

# inc/umba/tokenizer/parsers

- `mermaid_packet_diagram_parser_new.h` - Парсер mermaid packet diagram, расширенная версия, с использованием типов и массивов
- `parser_base.h` - Базовый парсер

# inc/umba/tokenizer/parsers/ufsm

- `parser.h` - Парсер языка Umba FSM
- `parser_types.h` - Типы для парсера ufsm

# inc/umba/tokenizer/parsers/ufsm/samples

- `concept.ufsm` - 
- `elevator.ufsm` - 
- `traffic_lights.ufsm` - 

# inc/umba/tokenizer/parsers

- `usketch_parser.h` - Парсер USketch - простое рисование
- `usketch_parser_types.h` - Типы для парсера usketch
- `utils.h` - Утилиты

# inc/umba/tokenizer

- `string_literal_parsing.h` - Интерфейс парсера строковых литералов ITokenizerLiteralParser, реализации парсеров SimpleQuotedStringLiteralParser и CppEscapedSimpleQuotedStringLiteralParser. Внутренний хидер.
- `token_collection.h` - Коллекция токенов.
- `token_filters.h` - Сборник всех фильтров токенизера
- `tokenizer.h` - Шаблонный класс Tokenizer, фвляется typedef'ом для класса TokenizerFunctionHandlers, в котором используются обработчики на базе std::function. Внутренний хидер.
- `tokenizer_base.h` - Реализация токенизера. Внутренний хидер.
- `tokenizer_builder.h` - TokenizerBuilder - создание токенизера. Для создания поисковых trie в токенизере используются TrieBuilder'ы. Внутренний хидер.
- `tokenizer_function_handlers.h` - TokenizerFunctionHandlers - токенизатор с обработчиками std::function. Внутренний хидер.
- `tokenizer_log.h` - Подсистема протоколирования для токенизеров-парсеров
- `tokenizer_log_console.h` - Подсистема протоколирования для токенизеров-парсеров (вывод в консоль)
- `tokenizer_options.h` - TokenizerOptions - параметры работы токенизера. Внутренний хидер.
- `tpl.h` - Шаблон внутреннего хидера (не включаемого явно пользователем) библиотеки токенизатора. Внутренний хидер.
- `trie_builder.h` - TrieBuilder - построитель префиксного дерева trie. Для простоты хранит всё в map, при построении trie создаёт компактную структуру. Внутренний хидер.
- `types.h` - Типы данных для подсистемы токенизации
- `utils.h` - Утилиты. Внутренний хидер.
