# TokenCollection

Класс `TokenCollection` хранит:

- список токенов `m_tokenCollectionList`;
- список 'полезной нагрузки' из токенов, у которых она была `m_tokenParsedDataCollectionList`;
- `shared` указатель на логгер - `m_log`;
- исходный текст (с нормализованными переносами строки) `m_text`;
- токенизатор `m_tokenizer` (по значению);
- идентификатор файла `m_fileId`.


Основной функцией класса `TokenCollection` является извлечение токена функцией `getToken`, которая через 
выходной параметр возвращает также индек токена в данной коллекции, при этом происходит увеличение внутреннего указателя токена;
также можно получить токен при помощи функции `peekToken` без увеличения внутреннего указателя токена;
также, если изменился контекст и пользовательский код перенастроил токенизатор, то очистить ранее извлечённые 
токены из кеша можно методом `clearFetched`.

Идентификатор файла `m_fileId` (его можно получить методом `getFileId`, также он хранится в информации о токене)
является идентификатором в наборе `FilenameSet`.

Если у нас обрабатывается один файл, и все сообщения об ошибках мы выводим только при разборе файла, то ничего
дополнительно заводить не нужно - создаётся `shared_ptr<Log>`, создаётся `tokenizerBuilder`, 
создаётся `shared_ptr<TokenCollection>`, создаётся требуемый парсер, получающий всё ранее созданное, и вызывается
метод парсера `parse()`.

Если мы хотим парсить множество файлов, и сохранять данные о местоположении всех конструкций в исходном файле,
то нам надо: а) для каждой конструкции хранить пару `{tokenPos,fileId}`, б) надо для каждого fileId хранить
`shared_ptr<TokenCollection>`, чтобы иметь возможность по `tokenPos` восстановить полный конекст положения
токена в исходных текстах.

Структура `FullTokenPosition` содержит поля `pos` и `fileId`. Поле `fileId` ссылается на идентификатор файла в `FilenameSet`.
`FilenameSet` для каждого файла хранит пользовательское поле, тип которого задаётся параметром шаблона. В нем можно
хранить результаты разбора, чтобы избегать повторного разбора при ссылке на тот же файл.

#/*


#// frag-num,proto-fmt=msdn,frag-start-idx=3
#!prototype{}  tokenizer/token_collection.h#`void setLineNumber`*-{};

#!prototype{}  tokenizer/token_collection.h#`void setFileId`*-{};

#!prototype{}  tokenizer/token_collection.h#`file_id_type getFileId`*-{};

#!prototype{}  tokenizer/token_collection.h#`tokenizer_type& getTokenizer`*-{};

#!prototype{}  tokenizer/token_collection.h#`string_type& getText`*-{};

#!prototype{}  tokenizer/token_collection.h#`char_type* getTextPointer`*-{};

#!prototype{}  tokenizer/token_collection.h#`std::string getTokenTextLine`*-{};

#!prototype{}  tokenizer/token_collection.h#`bool getLastTokenizeResult`*-{};

#!prototype{}  tokenizer/token_collection.h#`std::size_t getNumFetchedTokens`*-{};

#!prototype{}  tokenizer/token_collection.h#`const token_parsed_data_type* getTokenParsedData`*-{};

#!prototype{}  tokenizer/token_collection.h#`TextPositionInfo getTokenPositionInfo`*-{};

#!prototype{}  tokenizer/token_collection.h#`string_type getTokenText`*-{};

#!prototype{}  tokenizer/token_collection.h#`token_pos_type getCurTokenPos()`*-{};

#!prototype{}  tokenizer/token_collection.h#`token_pos_type getNextTokenPos`*-{};

#!prototype{}  tokenizer/token_collection.h#`void setTokenPos`*-{};

#!prototype{}  tokenizer/token_collection.h#`void clearFetched`*-{};

#!prototype{}  tokenizer/token_collection.h#`const TokenCollectionItemType* getToken`*-{};

#!prototype{}  tokenizer/token_collection.h#`const TokenCollectionItemType* peekToken`*-{};

#!prototype{}  tokenizer/token_collection.h#`std::size_t getNumberOfTokensTotal`*-{};

#!prototype{}  tokenizer/token_collection.h#`std::size_t getNumberOfTokenDataTotal`*-{};

#!prototype{}  tokenizer/token_collection.h#`std::size_t getBytesOfTokensTotal`*-{};

#!prototype{}  tokenizer/token_collection.h#`std::size_t getBytesOfTokenDataTotal`*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};

#!prototype{}  tokenizer/token_collection.h#``*-{};




Класс `TokenCollection` предназначен для:

1. хранит список токенов;
2. по команде умеет очищать выбранные из лексера токены;

#*/