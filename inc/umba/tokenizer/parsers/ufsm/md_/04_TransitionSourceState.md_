
#struct TransitionSourceState

Краткое описание
                        
#!snippet{} umba/tokenizer/parsers/ufsm/basic_types.h#`struct TransitionSourceState`-{};

## Поля структуры

<val-list>

- positionInfo
информация о позиции в исходных файлах.

- name
имя (название) действия.

- description
описание действия.

- flags
флаги (опции) действия.
ActionFlags                flags = ActionFlags::none; // none, external, generates

</val-list>


## Флаги (EventFlags flags)

<val-list>

- EventFlags::none
флаги не заданы.

- EventFlags::external
Событие является внешним, если установлен данный флаг. В противном случае событие является составным, 
и вектор `basicEvents` содержит имена базовых событий (базовых для данного, они, в свою очередь, также могут быть составными).

- EventFlags::generated
событие является генерируемым (внешними действиями/actions). Используется для проверок и оптимизаций.

</val-list>


## Методы

<val-list>

- getCanonicalName
формирует "каноническое" имя объекта. В данном случае, возвращает просто имя объекта, которое является его полем/членом.

</val-list>

## Описание

События могу быть внешними и составными.

Составные события - это список возможных событий, внешних, или также составных.

После обработки этот список раскрывается так, что содержит только внешние события.

Везде, где используется составное событие, оно в итоге будет обработано как список 
отдельных внешних событий.


**Примеры описаний событий, внешних и составных, а также внешних генерируемых:**
```
cmdStopTraffic : external - "The RED light (stop) mode is on";
tmToggleYellow : external generated;
evIntegralLiteral = evBoolLiteral | evIntLiteral - "Пришел интегральный литерал";
```

**Примечание**
Составное событие, хотя и записывается в виде логического выражения - дизъюнкции,
является не дизъюнкцией, а просто списком, в котором разделителем выступает символ '|'.

