/*! \file
    \brief Autogenerated enumerations (Umba Enum Gen)
 */

#pragma once


#include "marty_cpp/marty_enum.h"
#include "marty_cpp/marty_flag_ops.h"
#include "marty_cpp/marty_flags.h"

#include <exception>
#include <map>
#include <stdexcept>
#include <string>
#include <unordered_map>



namespace umba{
namespace tokenizer{
namespace ufsm{

//#!StateActionKind
enum class StateActionKind : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    none        = 0x0000 /*!<  */,
    enter       = 0x0001 /*!<  */,
    leave       = 0x0002 /*!<  */,
    selfEnter   = 0x0003 /*!<  */,
    selfLeave   = 0x0004 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(StateActionKind)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( StateActionKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::leave       , "Leave"     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::selfEnter   , "SelfEnter" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::none        , "None"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::enter       , "Enter"     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::selfLeave   , "SelfLeave" );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( StateActionKind, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( StateActionKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::leave       , "leave"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::invalid     , "invalid"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfEnter   , "self-enter" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfEnter   , "self_enter" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfEnter   , "selfenter"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::none        , "none"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::enter       , "enter"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfLeave   , "self-leave" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfLeave   , "self_leave" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfLeave   , "selfleave"  );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( StateActionKind, std::map, 1 )


//#!ActionFlags
enum class ActionFlags : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    none        = 0x0000 /*!<  */,
    external    = 0x0001 /*!<  */,
    generates   = 0x0002 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(ActionFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( ActionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::generates   , "Generates" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::none        , "None"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::external    , "External"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( ActionFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( ActionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::invalid     , "invalid"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::generates   , "generates" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::none        , "none"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::external    , "external"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( ActionFlags, std::map, 1 )


//#!EventFlags
enum class EventFlags : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    none        = 0x0000 /*!<  */,
    external    = 0x0001 /*!<  */,
    generated   = 0x0002 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(EventFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( EventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::none        , "None"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::generated   , "Generated" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::external    , "External"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( EventFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( EventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::invalid     , "invalid"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::none        , "none"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::generated   , "generated" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::external    , "external"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( EventFlags, std::map, 1 )


//#!InheritanceOverrideFlags
enum class InheritanceOverrideFlags : std::uint32_t
{
    invalid       = (std::uint32_t)(-1) /*!<  */,
    none          = 0x0000 /*!<  */,
    actions       = 0x0001 /*!<  */,
    events        = 0x0002 /*!<  */,
    predicates    = 0x0004 /*!<  */,
    states        = 0x0008 /*!<  */,
    transitions   = 0x0010 /*!<  */,
    all           = events|actions|predicates|states|transitions /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(InheritanceOverrideFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( InheritanceOverrideFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::invalid       , "Invalid"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::transitions   , "Transitions" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::none          , "None"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::all           , "All"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::events        , "Events"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::actions       , "Actions"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::states        , "States"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::predicates    , "Predicates"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( InheritanceOverrideFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( InheritanceOverrideFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::invalid       , "invalid"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::transitions   , "transitions" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::none          , "none"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::all           , "all"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::events        , "events"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::actions       , "actions"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::states        , "states"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::predicates    , "predicates"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( InheritanceOverrideFlags, std::map, 1 )


//#!PredicateFlags
enum class PredicateFlags : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x0000 /*!<  */,
    external   = 0x0001 /*!<  */,
    validFor   = 0x0002 /*!< valid-for list is actual */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(PredicateFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( PredicateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::none       , "None"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::external   , "External" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::validFor   , "ValidFor" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( PredicateFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( PredicateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::invalid    , "invalid"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::none       , "none"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::external   , "external"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::validFor   , "valid-for" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::validFor   , "valid_for" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::validFor   , "validfor"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( PredicateFlags, std::map, 1 )


//#!StateFlags
enum class StateFlags : std::uint32_t
{
    invalid   = (std::uint32_t)(-1) /*!<  */,
    none      = 0x0000 /*!<  */,
    initial   = 0x0001 /*!<  */,
    final     = 0x0002 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(StateFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( StateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::invalid   , "Invalid" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::initial   , "Initial" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::none      , "None"    );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::final     , "Final"   );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( StateFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( StateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::invalid   , "invalid" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::initial   , "initial" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::none      , "none"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::final     , "final"   );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( StateFlags, std::map, 1 )


//#!TransitionEventFlags
enum class TransitionEventFlags : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x0000 /*!<  */,
    any        = 0x0001 /*!< Applied for any source state */,
    excluded   = 0x0002 /*!< Excluded from source states list (used only if ANY state present in source states) */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(TransitionEventFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( TransitionEventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::none       , "None"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::any        , "Any"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::excluded   , "Excluded" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( TransitionEventFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( TransitionEventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::invalid    , "invalid"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::none       , "none"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::any        , "any"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::excluded   , "excluded" );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( TransitionEventFlags, std::map, 1 )


//#!TransitionFlags
enum class TransitionFlags : std::uint32_t
{
    invalid       = (std::uint32_t)(-1) /*!<  */,
    none          = 0x0000 /*!<  */,
    conditional   = 0x0001 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(TransitionFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( TransitionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::invalid       , "Invalid"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::conditional   , "Conditional" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::none          , "None"        );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( TransitionFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( TransitionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::invalid       , "invalid"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::conditional   , "conditional" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::none          , "none"        );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( TransitionFlags, std::map, 1 )


//#!TransitionSourceStateFlags
enum class TransitionSourceStateFlags : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x0000 /*!<  */,
    any        = 0x0001 /*!< Applied for any source state */,
    excluded   = 0x0002 /*!< Excluded from source states list (used only if ANY state present in source states) */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(TransitionSourceStateFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( TransitionSourceStateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::none       , "None"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::any        , "Any"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::excluded   , "Excluded" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( TransitionSourceStateFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( TransitionSourceStateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::invalid    , "invalid"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::none       , "none"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::any        , "any"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::excluded   , "excluded" );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( TransitionSourceStateFlags, std::map, 1 )

} // namespace ufsm
} // namespace tokenizer
} // namespace umba

