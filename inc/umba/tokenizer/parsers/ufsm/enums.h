/*! \file
    \brief Autogenerated enumerations (Umba Enum Gen)
 */

#pragma once


#include "marty_cpp/marty_enum.h"
#include "marty_cpp/marty_flag_ops.h"
#include "marty_cpp/marty_flags.h"

#include <exception>
#include <map>
#include <stdexcept>
#include <string>
#include <unordered_map>



namespace umba{
namespace tokenizer{
namespace ufsm{

//#!StateActionKind
enum class StateActionKind : std::uint32_t
{
    invalid      = (std::uint32_t)(-1) /*!<  */,
    none         = 0x0000 /*!<  */,
    stateEnter   = 0x0001 /*!<  */,
    stateLeave   = 0x0002 /*!<  */,
    selfEnter    = 0x0003 /*!<  */,
    selfLeave    = 0x0004 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(StateActionKind)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( StateActionKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::stateEnter   , "StateEnter" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::invalid      , "Invalid"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::selfEnter    , "SelfEnter"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::none         , "None"       );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::stateLeave   , "StateLeave" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StateActionKind::selfLeave    , "SelfLeave"  );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( StateActionKind, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( StateActionKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::stateEnter   , "state-enter" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::stateEnter   , "state_enter" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::stateEnter   , "stateenter"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::invalid      , "invalid"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfEnter    , "self-enter"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfEnter    , "self_enter"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfEnter    , "selfenter"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::none         , "none"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::stateLeave   , "state-leave" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::stateLeave   , "state_leave" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::stateLeave   , "stateleave"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfLeave    , "self-leave"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfLeave    , "self_leave"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StateActionKind::selfLeave    , "selfleave"   );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( StateActionKind, std::map, 1 )


//#!NamespaceEntryKind
enum class NamespaceEntryKind : std::uint32_t
{
    invalid         = (std::uint32_t)(-1) /*!<  */,
    none            = 0x0000 /*!<  */,
    nsDefinition    = 0x0001 /*!<  */,
    fsmDefinition   = 0x0002 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(NamespaceEntryKind)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( NamespaceEntryKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NamespaceEntryKind::invalid         , "Invalid"       );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NamespaceEntryKind::none            , "None"          );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NamespaceEntryKind::nsDefinition    , "NsDefinition"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NamespaceEntryKind::fsmDefinition   , "FsmDefinition" );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( NamespaceEntryKind, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( NamespaceEntryKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::invalid         , "invalid"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::none            , "none"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::nsDefinition    , "ns-definition"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::nsDefinition    , "ns_definition"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::nsDefinition    , "nsdefinition"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::fsmDefinition   , "fsm-definition" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::fsmDefinition   , "fsm_definition" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NamespaceEntryKind::fsmDefinition   , "fsmdefinition"  );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( NamespaceEntryKind, std::map, 1 )


//#!InheritanceListMode
enum class InheritanceListMode : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    inherits   = 0x0000 /*!<  */,
    uses       = 0x0001 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(InheritanceListMode)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( InheritanceListMode, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( InheritanceListMode::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( InheritanceListMode::inherits   , "Inherits" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( InheritanceListMode::uses       , "Uses"     );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( InheritanceListMode, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( InheritanceListMode, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( InheritanceListMode::invalid    , "invalid"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( InheritanceListMode::inherits   , "inherits" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( InheritanceListMode::uses       , "uses"     );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( InheritanceListMode, std::map, 1 )


//#!ActionFlags
enum class ActionFlags : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    none        = 0x0000 /*!<  */,
    inherited   = 0x0001 /*!< Set when the action is inherited */,
    override    = 0x0002 /*!< Set when the action overrides inherited */,
    external    = 0x0004 /*!<  */,
    generates   = 0x0008 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(ActionFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( ActionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::generates   , "Generates" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::none        , "None"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::inherited   , "Inherited" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::override    , "Override"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ActionFlags::external    , "External"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( ActionFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( ActionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::invalid     , "invalid"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::generates   , "generates" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::none        , "none"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::inherited   , "inherited" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::override    , "override"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ActionFlags::external    , "external"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( ActionFlags, std::map, 1 )


//#!EventFlags
enum class EventFlags : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    none        = 0x0000 /*!<  */,
    inherited   = 0x0001 /*!< Set when the event is inherited */,
    override    = 0x0002 /*!< Set when the event overrides inherited */,
    external    = 0x0004 /*!<  */,
    generated   = 0x0008 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(EventFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( EventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::none        , "None"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::inherited   , "Inherited" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::override    , "Override"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::generated   , "Generated" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( EventFlags::external    , "External"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( EventFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( EventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::invalid     , "invalid"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::none        , "none"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::inherited   , "inherited" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::override    , "override"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::generated   , "generated" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( EventFlags::external    , "external"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( EventFlags, std::map, 1 )


//#!FullQualifiedNameFlags
enum class FullQualifiedNameFlags : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x0000 /*!<  */,
    absolute   = 0x0001 /*!< Starts from root scope, not from current scope */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(FullQualifiedNameFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( FullQualifiedNameFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FullQualifiedNameFlags::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FullQualifiedNameFlags::none       , "None"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FullQualifiedNameFlags::absolute   , "Absolute" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( FullQualifiedNameFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( FullQualifiedNameFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FullQualifiedNameFlags::invalid    , "invalid"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FullQualifiedNameFlags::none       , "none"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FullQualifiedNameFlags::absolute   , "absolute" );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( FullQualifiedNameFlags, std::map, 1 )


//#!InheritanceOverrideFlags
enum class InheritanceOverrideFlags : std::uint32_t
{
    invalid       = (std::uint32_t)(-1) /*!<  */,
    none          = 0x0000 /*!<  */,
    actions       = 0x0001 /*!<  */,
    events        = 0x0002 /*!<  */,
    predicates    = 0x0004 /*!<  */,
    states        = 0x0008 /*!<  */,
    transitions   = 0x0010 /*!<  */,
    all           = actions|events|predicates|states|transitions /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(InheritanceOverrideFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( InheritanceOverrideFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::invalid       , "Invalid"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::transitions   , "Transitions" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::none          , "None"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::all           , "All"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::events        , "Events"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::actions       , "Actions"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::states        , "States"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( InheritanceOverrideFlags::predicates    , "Predicates"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( InheritanceOverrideFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( InheritanceOverrideFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::invalid       , "invalid"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::transitions   , "transitions" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::none          , "none"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::all           , "all"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::events        , "events"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::actions       , "actions"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::states        , "states"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( InheritanceOverrideFlags::predicates    , "predicates"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( InheritanceOverrideFlags, std::map, 1 )


//#!ParentListEntryFlags
enum class ParentListEntryFlags : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x0000 /*!<  */,
    uses       = 0x0001 /*!< Not inherits state machine, only uses it - can be used for definitions to convert FSM to defs */,
    inherits   = 0x0002 /*!< Inherits state machine, can't inherit `definition`s. */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(ParentListEntryFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( ParentListEntryFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ParentListEntryFlags::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ParentListEntryFlags::none       , "None"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ParentListEntryFlags::uses       , "Uses"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( ParentListEntryFlags::inherits   , "Inherits" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( ParentListEntryFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( ParentListEntryFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ParentListEntryFlags::invalid    , "invalid"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ParentListEntryFlags::none       , "none"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ParentListEntryFlags::uses       , "uses"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( ParentListEntryFlags::inherits   , "inherits" );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( ParentListEntryFlags, std::map, 1 )


//#!PredicateFlags
enum class PredicateFlags : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    none        = 0x0000 /*!<  */,
    inherited   = 0x0001 /*!< Set when the predicate is inherited */,
    override    = 0x0002 /*!< Set when the predicate overrides inherited */,
    external    = 0x0004 /*!<  */,
    validFor    = 0x0008 /*!< valid-for list is actual */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(PredicateFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( PredicateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::none        , "None"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::inherited   , "Inherited" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::override    , "Override"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::external    , "External"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( PredicateFlags::validFor    , "ValidFor"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( PredicateFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( PredicateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::invalid     , "invalid"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::none        , "none"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::inherited   , "inherited" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::override    , "override"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::external    , "external"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::validFor    , "valid-for" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::validFor    , "valid_for" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( PredicateFlags::validFor    , "validfor"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( PredicateFlags, std::map, 1 )


//#!StateFlags
enum class StateFlags : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    none        = 0x0000 /*!<  */,
    inherited   = 0x0001 /*!< Set when the state is inherited */,
    override    = 0x0002 /*!< Set when the state overrides inherited */,
    initial     = 0x0004 /*!<  */,
    final       = 0x0008 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(StateFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( StateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::initial     , "Initial"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::none        , "None"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::inherited   , "Inherited" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::override    , "Override"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateFlags::final       , "Final"     );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( StateFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( StateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::invalid     , "invalid"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::initial     , "initial"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::none        , "none"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::inherited   , "inherited" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::override    , "override"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateFlags::final       , "final"     );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( StateFlags, std::map, 1 )


//#!StateMachineFlags
enum class StateMachineFlags : std::uint32_t
{
    invalid        = (std::uint32_t)(-1) /*!<  */,
    none           = 0x0000 /*!<  */,
    stateMachine   = 0x0001 /*!< Simple `definition`, if flag not set */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(StateMachineFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( StateMachineFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateMachineFlags::invalid        , "Invalid"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateMachineFlags::none           , "None"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( StateMachineFlags::stateMachine   , "StateMachine" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( StateMachineFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( StateMachineFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateMachineFlags::invalid        , "invalid"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateMachineFlags::none           , "none"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateMachineFlags::stateMachine   , "state-machine" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateMachineFlags::stateMachine   , "state_machine" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( StateMachineFlags::stateMachine   , "statemachine"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( StateMachineFlags, std::map, 1 )


//#!TransitionEventFlags
enum class TransitionEventFlags : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x0000 /*!<  */,
    any        = 0x0001 /*!< Applied for any source state */,
    excluded   = 0x0002 /*!< Excluded from source states list (used only if ANY state present in source states) */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(TransitionEventFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( TransitionEventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::none       , "None"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::any        , "Any"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionEventFlags::excluded   , "Excluded" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( TransitionEventFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( TransitionEventFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::invalid    , "invalid"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::none       , "none"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::any        , "any"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionEventFlags::excluded   , "excluded" );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( TransitionEventFlags, std::map, 1 )


//#!TransitionFlags
enum class TransitionFlags : std::uint32_t
{
    invalid       = (std::uint32_t)(-1) /*!<  */,
    none          = 0x0000 /*!<  */,
    inherited     = 0x0001 /*!< Set when the transition is inherited */,
    override      = 0x0002 /*!< Set when the transition overrides inherited */,
    conditional   = 0x0004 /*!<  */,
    selfTarget    = 0x0008 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(TransitionFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( TransitionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::invalid       , "Invalid"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::conditional   , "Conditional" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::none          , "None"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::inherited     , "Inherited"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::override      , "Override"    );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionFlags::selfTarget    , "SelfTarget"  );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( TransitionFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( TransitionFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::invalid       , "invalid"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::conditional   , "conditional" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::none          , "none"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::inherited     , "inherited"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::override      , "override"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::selfTarget    , "self-target" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::selfTarget    , "self_target" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionFlags::selfTarget    , "selftarget"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( TransitionFlags, std::map, 1 )


//#!TransitionSourceStateFlags
enum class TransitionSourceStateFlags : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x0000 /*!<  */,
    any        = 0x0001 /*!< Applied for any source state */,
    excluded   = 0x0002 /*!< Excluded from source states list (used only if ANY state present in source states) */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(TransitionSourceStateFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( TransitionSourceStateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::none       , "None"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::any        , "Any"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( TransitionSourceStateFlags::excluded   , "Excluded" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( TransitionSourceStateFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( TransitionSourceStateFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::invalid    , "invalid"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::none       , "none"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::any        , "any"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( TransitionSourceStateFlags::excluded   , "excluded" );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( TransitionSourceStateFlags, std::map, 1 )

} // namespace ufsm
} // namespace tokenizer
} // namespace umba

